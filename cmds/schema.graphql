scalar Date

type User {
	id: ID!
	email: String!
	name: String
	runningTask: Task
}

type Task {
	id: ID!
	name: String!
	description: String
	status: Int!
	timeCreated: Date!
	timeUpdated: Date!
	timeCompleted: Date
	dueDate: Date
}

type Event {
	id: ID!
	task: Task!
	timing: [String!]!
	fullPomo: Boolean!
	timeCreated: Date!
	timeUpdated: Date!
}

type Query {
	events(date: Date!): [Event!]
	me: User
	tasks(date: Date!): [Task!]
}

input LoginInput {
	username: String!
	password: String!
}

input TaskInput {
	name: String!
	description: String
	status: Int
	dueDate: Date
}

input TaskUpdateInput {
	taskId: ID!
	taskFields: TaskInput!
}

input PomoInput {
	taskId: ID!
}

type AuthPayload {
	user: User!
	token: String!
}

type Mutation {
	login(input: LoginInput!): AuthPayload!
	logout: Boolean!
	taskCreate(input: TaskInput!): Task!
	taskUpdate(input: TaskUpdateInput!): Task!
	pomoStart(input: PomoInput!): Event!
	pomoPause(input: PomoInput!): Event!
}