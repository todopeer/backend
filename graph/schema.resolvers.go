package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/flyfy1/diarier/graph/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// TaskCreate is the resolver for the taskCreate field.
func (r *mutationResolver) TaskCreate(ctx context.Context, input model.TaskInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: TaskCreate - taskCreate"))
}

// TaskUpdate is the resolver for the taskUpdate field.
func (r *mutationResolver) TaskUpdate(ctx context.Context, input model.TaskUpdateInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: TaskUpdate - taskUpdate"))
}

// PomoStart is the resolver for the pomoStart field.
func (r *mutationResolver) PomoStart(ctx context.Context, input model.PomoInput) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: PomoStart - pomoStart"))
}

// PomoPause is the resolver for the pomoPause field.
func (r *mutationResolver) PomoPause(ctx context.Context, input model.PomoInput) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: PomoPause - pomoPause"))
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, date string) ([]*model.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, date string) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: Tasks - tasks"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
