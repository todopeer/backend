scalar Time

enum TaskStatus {
  NOT_STARTED
  DOING
  DONE
  PAUSED
}

type Task {
	id: ID!
	name: String!
	description: String
	status: TaskStatus!
	createdAt: Time!
	updatedAt: Time!

	dueDate: Time
}

type TaskDetail {
	task: Task!
	events: [Event!]
}

type Event {
	id: ID!
	taskID: ID!
	startAt: Time!
	endAt: Time
}

input TaskCreateInput {
	name: String!
	description: String
	dueDate: Time
}

input TaskUpdateInput {
	name: String
	description: String
	dueDate: Time
	status: TaskStatus
}

enum QueryTaskOrderField {
	CREATED_AT	# default
	UPDATED_AT
	ID
	STATUS
}

enum OrderDirection {
	ASC  # default
	DESC
}

input QueryTaskOrderBy {
	field: QueryTaskOrderField!
	direction: OrderDirection
}

input QueryTaskInput {
	status: [TaskStatus!]
	orderBy: QueryTaskOrderBy
}

input QueryUserTasksInput {
	username: String!
}

type QueryUserTaskResult {
	user: UserPublic!
	tasks: [Task!]
	doing: Task
}

extend type Query {
	# events(QueryEventInput!): [Event!] @auth
	tasks(input: QueryTaskInput!): [Task!] @auth
	task(id: ID!): TaskDetail! @auth

	# to view someone's task (of your interest)
	userTasks(username: String!): QueryUserTaskResult!
}

extend type Mutation {
	taskCreate(input: TaskCreateInput!): Task! @auth
	taskUpdate(id: ID!, input: TaskUpdateInput!): Task! @auth
	taskRemove(id: ID!): Task! @auth
}