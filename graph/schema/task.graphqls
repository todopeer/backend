scalar Time

enum TaskStatus {
  NOT_STARTED
  DOING
  DONE
}

type Task {
	id: ID!
	name: String!
	description: String
	status: TaskStatus!
	createdAt: Time!
	updatedAt: Time!
	completedAt: Time
	dueDate: Time
	events: [Event!]
}

type Event {
	id: ID!
	task: Task!
	timing: [String!]!
	fullPomo: Boolean!
	timeCreated: Time!
	timeUpdated: Time!
}

input TaskCreateInput {
	name: String!
	description: String
	dueDate: Time
}

input TaskUpdateInput {
	taskId: ID!

	name: String
	description: String
	dueDate: Time
	status: TaskStatus
}

extend type Mutation {
	taskCreate(input: TaskCreateInput!): Task! @auth
	taskUpdate(input: TaskUpdateInput!): Task! @auth
	taskRemove(id: ID!): Task! @auth
}

input QueryTaskInput {
	status: TaskStatus
}

extend type Query {
	events(date: Time!): [Event!] @auth
	tasks(input: QueryTaskInput!): [Task!] @auth
}