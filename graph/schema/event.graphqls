type Event {
	id: ID!
	taskID: ID!

	startAt: Time!
	endAt: Time

    description: String
}

type QueryEventsResult {
    # list of tasks for all events occurred
    tasks: [Task!]!

    # list of events on given day
    events: [Event!]!
}

extend type Query {
	events(since: Time!, days: Int!): QueryEventsResult! @auth
    # get specific event (where user have access to)
	event(id: ID!): Event! @auth
}

input EventCreateInput {
	startAt: Time!
	endAt: Time!

    description: String
}

input EventUpdateInput {
	startAt: Time
	endAt: Time

    # to reassign this event to another task
    taskID: ID

    description: String
}

extend type Mutation {
    eventCreate(taskID: ID!, input: EventCreateInput!): Event! @auth
    eventUpdate(id: ID!, input: EventUpdateInput!): Event! @auth
    eventRemove(id: ID!): Event! @auth
}