package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"sort"
	"time"

	"github.com/Shopify/hoff"
	"github.com/todopeer/backend/graph/model"
	"github.com/todopeer/backend/orm"
	"github.com/todopeer/backend/services/auth"
	"github.com/todopeer/backend/util/highorder"
)

// EventUpdate is the resolver for the eventUpdate field.
func (r *mutationResolver) EventUpdate(ctx context.Context, id int64, input model.EventUpdateInput) (*model.Event, error) {
	user := auth.UserFromContext(ctx)
	event, err := r.eventOrm.GetEventByID(id)
	if err != nil {
		return nil, err
	}
	if *event.UserID != user.ID {
		return nil, ErrUnauthorized
	}

	// Update event fields if corresponding field is set in input
	if input.StartAt != nil {
		event.StartAt = input.StartAt
	}

	if input.EndAt != nil {
		event.EndAt = input.EndAt
	}

	if input.Description != nil {
		event.Description = input.Description
	}

	// Fill in this part, to update event field if corresponding field is set in input

	return model.ConvertToGqlEventModel(event), r.eventOrm.UpdateEvent(event)
}

// EventRemove is the resolver for the eventRemove field.
func (r *mutationResolver) EventRemove(ctx context.Context, id int64) (*model.Event, error) {
	user := auth.UserFromContext(ctx)
	event, err := r.eventOrm.GetEventByID(id)
	if err != nil {
		return nil, err
	}
	if *event.UserID != user.ID {
		return nil, ErrUnauthorized
	}

	return model.ConvertToGqlEventModel(event), r.eventOrm.DeleteEvent(event)
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, since time.Time, days int32) (*model.QueryEventsResult, error) {
	startAt := since
	endAt := since.Add(time.Hour * 24 * time.Duration(days))
	user := auth.UserFromContext(ctx)
	events, err := r.eventOrm.GetUserEventsRange(user.ID, startAt, endAt)
	if err != nil {
		return nil, err
	}

	taskIdsWithDup := hoff.Map(events, func(e *orm.Event) int64 { return *e.TaskID })
	sort.Slice(taskIdsWithDup, func(i, j int) bool { return taskIdsWithDup[i] < taskIdsWithDup[j] })
	taskIds := highorder.Uniq(taskIdsWithDup)
	tasks, err := r.taskOrm.GetTasksByIDs(taskIds, orm.GetTasksByIDsOptionWithDeleted)
	if err != nil {
		return nil, err
	}

	return &model.QueryEventsResult{
		Tasks:  hoff.Map(tasks, model.ConvertToGqlTaskModel),
		Events: hoff.Map(events, model.ConvertToGqlEventModel),
	}, nil
}
